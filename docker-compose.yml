# version is now using "compose spec"
# v2 and v3 are now combined!
# docker-compose v1.27+ required

services:
  vote:
    build: 
      context: ./vote
      target: dev
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "vote"}]'
      com.datadoghq.tags.env: '${DD_ENV}'
      com.datadoghq.tags.service: 'vote'
      com.datadoghq.tags.version: '1.0.10'
      my.custom.label.team: 'frontend'
    depends_on:
      redis:
        condition: service_healthy
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      - DD_ENV=prod
      - DD_SERVICE=vote
      - DD_VERSION=1.0.10
      - DD_AGENT_HOST=datadog
      - DD_LOGS_INJECTION=true
      - DD_RUNTIME_METRICS_ENABLED=true
      - DD_TRACE_AGENT_PORT=8126
    volumes:
    - ./vote:/usr/local/app
    ports:
      - "8080:80"
    networks:
      - front-tier
      - back-tier

  datadog:
    image: gcr.io/datadoghq/agent
    container_name: datadog
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    environment:
      - DD_SITE=datadoghq.com
      - DD_API_KEY
      - DD_CONTAINER_LABELS_AS_TAGS=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_APM_ENABLED=true
    ports:
      - 8126:8126/tcp
      - 8125:8125
    cap_add:
      - SYS_ADMIN
      - SYS_RESOURCE
      - SYS_PTRACE
      - NET_ADMIN
      - NET_BROADCAST
      - NET_RAW
      - IPC_LOCK
      - CHOWN
    security_opt:
      - apparmor:unconfined
    networks:
      - front-tier
      - back-tier
  result:
    build: ./result
    # use nodemon rather than node for local dev
    entrypoint: nodemon --inspect=0.0.0.0 server.js
    labels:
      - env=prod
      - service=result
    depends_on:
      db:
        condition: service_healthy 
    volumes:
      - ./result:/usr/local/app
    ports:
      - "8081:80"
      - "127.0.0.1:9229:9229"
    environment:
      - DD_ENV=prod
      - DD_SERVICE=result
      - DD_VERSION=1.0.10
      - DD_AGENT_HOST=datadog
      - DD_LOGS_INJECTION=true
      - DD_RUNTIME_METRICS_ENABLED=true
    networks:
      - front-tier
      - back-tier

  worker:
    build:
      context: ./worker
    labels:
      env: prod
      service: worker
      com.datadoghq.tags.env: prod
      com.datadoghq.tags.service: worker
      com.datadoghq.tags.version: 1.0.10
    environment:
      - DD_ENV=prod
      - DD_SERVICE=worker
      - DD_VERSION=1.0.10
      - DD_AGENT_HOST=datadog
      - DD_LOGS_INJECTION=true
      - DD_RUNTIME_METRICS_ENABLED=true
    depends_on:
      redis:
        condition: service_healthy 
      db:
        condition: service_healthy 
    networks:
      - back-tier

  redis:
    image: redis:alpine
    labels:
      - env=prod
      - service=redis
    volumes:
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/redis.sh
      interval: "5s"
    environment:
      - DD_ENV=prod
      - DD_SERVICE=redis
      - DD_VERSION=1.0.10
      - DD_AGENT_HOST=datadog
      - DD_LOGS_INJECTION=true
      - DD_RUNTIME_METRICS_ENABLED=true
    networks:
      - back-tier

  db:
    image: postgres:15-alpine
    labels:
      - env=prod
      - service=database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - DD_ENV=prod
      - DD_SERVICE=database
      - DD_VERSION=1.0.10
      - DD_AGENT_HOST=datadog
      - DD_LOGS_INJECTION=true
      - DD_RUNTIME_METRICS_ENABLED=true
    volumes:
      - "db-data:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: "5s"
    networks:
      - back-tier

  # this service runs once to seed the database with votes
  # it won't run unless you specify the "seed" profile
  # docker compose --profile seed up -d
  seed:
    build: ./seed-data
    labels:
      - env=prod
      - service=seed
    profiles: ["seed"]
    depends_on:
      vote:
        condition: service_healthy 
    networks:
      - front-tier
    restart: "no"

volumes:
  db-data:

networks:
  front-tier:
  back-tier:
